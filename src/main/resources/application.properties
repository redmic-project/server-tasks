#Active dataSession
dataSession.enabled=true

#api
server.port=8088
server.servlet.context-path=/api
spring.mvc.servlet.path=/tasks

spring.profiles.active=@spring.profiles.active@

info.microservice.name=@project.name@
info.microservice.description=@project.description@
info.microservice.version=@project.version@
info.microservice.outputEncoding=@project.reporting.outputEncoding@

management.endpoints.web.exposure.include=health, info, prometheus

logging.level.root=warn
logging.level.org.springframework=debug
logging.level.es.redmic=${logging.level.es.redmic}

#Kafka config
spring.kafka.bootstrap-servers=${spring.kafka.bootstrap-servers}
spring.kafka.consumer.auto-offset-reset=earliest
spring.kafka.consumer.group-id=@project.name@
spring.kafka.producer.key-serializer=org.apache.kafka.common.serialization.StringSerializer
spring.kafka.producer.value-serializer=io.confluent.kafka.serializers.KafkaAvroSerializer
spring.kafka.consumer.key-deserializer=org.apache.kafka.common.serialization.StringDeserializer
spring.kafka.consumer.value-deserializer=io.confluent.kafka.serializers.KafkaAvroDeserializer

spring.kafka.properties.specific.avro.reader=true
spring.kafka.properties.value.subject.name.strategy=io.confluent.kafka.serializers.subject.TopicRecordNameStrategy
spring.kafka.properties.schema.registry.url=${spring.kafka.properties.schema.registry.url}

# DATASOURCE (DataSourceAutoConfiguration & DataSourceProperties)
spring.datasource.driver-class-name=org.postgresql.Driver
spring.datasource.username=username
spring.datasource.password=password
spring.datasource.jdbc-url=${spring.datasource.url}
spring.datasource.initialization-mode=never

spring.datasource.hikari.max-lifetime=600000

# DATASOURCE Jobs
jobs.datasource.driver-class-name=org.postgresql.Driver
jobs.datasource.initialization-mode=never
jobs.datasource.driverClassName=${spring.datasource.driverClassName}
jobs.datasource.schema=job
jobs.datasource.name=job
jobs.datasource.username=username
jobs.datasource.password=password
jobs.datasource.jdbc-url=${jobs.datasource.url}

spring.batch.initialize-schema=never

spring.jackson.deserialization.fail-on-unknown-properties=false
spring.jackson.deserialization.wrap-exceptions=false

# JPA (JpaBaseConfiguration, HibernateJpaAutoConfiguration)
spring.data.jpa.repositories.enabled=true
spring.jpa.generate-ddl=false
spring.jpa.hibernate.ddl-auto=none
spring.jpa.show-sql=false
spring.jpa.properties.dialect=org.hibernate.spatial.dialect.postgis.PostgisDialect
spring.jpa.database-platform=org.hibernate.spatial.dialect.postgis.PostgisDialect
spring.jpa.database=postgresql

# Workaround for error 'Method org.postgresql.jdbc.PgConnection.createClob() is not yet implemented.'
spring.jpa.properties.hibernate.jdbc.lob.non_contextual_creation=true

#elastic
elastic.addresses=${elastic.addresses}
elastic.port=${elastic.port}
elastic.clusterName=${elastic.clusterName}
elastic.user=user
elastic.password=password

redmic.elasticsearch.check.mappings=${redmic.elasticsearch.check.mappings}
redmic.elasticsearch.create.mappings=${redmic.elasticsearch.create.mappings}
redmic.elasticsearch.MAX_QUERY_SIZE=3000

#Mediastorage S3
aws.bucket=${aws.bucket}
aws.access.key=aws.access.key
aws.secret.key=aws.secret.key
aws.region=${aws.region}

#Properties
property.INGEST_DATA_DOCUMENT_TASK_NAME=ingest-data-document
property.WORMS_TO_REDMIC_TASK_NAME=worms-to-redmic
property.REPORT_TASK_NAME=generate-report

#Topics de escucha
#topics para escuchar de socket
broker.topic.task.ingest.document.run=tasks.ingest.document.run
broker.topic.task.ingest.document.resume=tasks.ingest.document.resume

broker.topic.task.worms.run=tasks.wormstoredmic.run

broker.topic.task.report.activity.run=tasks.report.activity.run
broker.topic.task.report.document.run=tasks.report.document.run
broker.topic.task.report.program.run=tasks.report.program.run
broker.topic.task.report.project.run=tasks.report.project.run
broker.topic.task.report.species.run=tasks.report.species.run

broker.topic.task.getstatus=tasks.getstatus
broker.topic.task.remove=tasks.remove

#Topics de envio
#topic genrico para enviar status de todas las tareas
broker.topic.task.status=tasks.status
#topic del broker para enviar el status de task para ingest
broker.topic.task.ingest.status=tasks.ingest.status
#topic del broker para enviar el status de task para wormstoredmic
broker.topic.task.worms.status=tasks.wormstoredmic.status

#topic del broker para enviar el status de task para report
broker.topic.task.report.status=tasks.report.status

#topic del broker para enviar el status de task para report de activity
broker.topic.task.report.activity.status=tasks.report.activity.status
#topic del broker para enviar el status de task para report de document
broker.topic.task.report.document.status=tasks.report.document.status
#topic del broker para enviar el status de task para report de program
broker.topic.task.report.program.status=tasks.report.program.status
#topic del broker para enviar el status de task para report de project
broker.topic.task.report.project.status=tasks.report.project.status
#topic del broker para enviar el status de task para report de species
broker.topic.task.report.species.status=tasks.report.species.status

#Worms
property.path.base.url.worms=http://www.marinespecies.org/rest/
property.path.worms.APHIA_RECORD_BY_APHIAID=${property.path.base.url.worms}AphiaRecordByAphiaID/
property.path.worms.APHIA_RECORDS_BY_NAME=${property.path.base.url.worms}AphiaRecordsByName/
property.path.worms.APHIA_CLASSIFICATION_BY_APHIAID=${property.path.base.url.worms}AphiaClassificationByAphiaID/

#report

property.URL_BASE_MEDIASTORAGE=/api/mediastorage
property.URL_BASE_PHOTOBANK_MEDIASTORAGE=${property.URL_BASE_MEDIASTORAGE}/photobank
property.URL_LAYERS_MEDIASTORAGE=${property.URL_BASE_PHOTOBANK_MEDIASTORAGE}/layers/

property.URL_DOCUMENTS=${property.URL_BASE_MEDIASTORAGE}/documents/

#Mediastorage
#Base

property.path.media_storage.PRIVATE_BASE_PATH=${property.path.media_storage.PRIVATE_BASE_PATH}
property.path.media_storage.PUBLIC_BASE_PATH=${property.path.media_storage.PUBLIC_BASE_PATH}
property.path.media_storage.LOCAL_PRIVATE_BASE_PATH=${property.path.media_storage.LOCAL_PRIVATE_BASE_PATH}
property.path.media_storage.LOCAL_PUBLIC_BASE_PATH=${property.path.media_storage.LOCAL_PUBLIC_BASE_PATH}

#Local private

property.path.media_storage.TEMP_BASE_PATH=${property.path.media_storage.LOCAL_PRIVATE_BASE_PATH}/temp
property.path.media_storage.temp.INGEST_DATA=${property.path.media_storage.TEMP_BASE_PATH}/ingestdata
property.path.temp.report=${property.path.media_storage.TEMP_BASE_PATH}/report

#Local public

property.path.media_storage.TEMP_PUBLIC=${property.path.media_storage.LOCAL_PUBLIC_BASE_PATH}/temp

spring.batch.job.enabled=false

#Exclude from autoconfigure
spring.autoconfigure.exclude=org.springframework.boot.autoconfigure.admin.SpringApplicationAdminJmxAutoConfiguration, org.springframework.boot.autoconfigure.amqp.RabbitAutoConfiguration, org.springframework.boot.autoconfigure.aop.AopAutoConfiguration, org.springframework.boot.autoconfigure.cassandra.CassandraAutoConfiguration, org.springframework.boot.autoconfigure.cloud.CloudAutoConfiguration, org.springframework.boot.autoconfigure.context.MessageSourceAutoConfiguration, org.springframework.boot.autoconfigure.context.PropertyPlaceholderAutoConfiguration, org.springframework.boot.autoconfigure.couchbase.CouchbaseAutoConfiguration, org.springframework.boot.autoconfigure.data.cassandra.CassandraDataAutoConfiguration, org.springframework.boot.autoconfigure.data.cassandra.CassandraRepositoriesAutoConfiguration, org.springframework.boot.autoconfigure.data.couchbase.CouchbaseDataAutoConfiguration, org.springframework.boot.autoconfigure.data.couchbase.CouchbaseRepositoriesAutoConfiguration, org.springframework.boot.autoconfigure.data.elasticsearch.ElasticsearchAutoConfiguration, org.springframework.boot.autoconfigure.data.elasticsearch.ElasticsearchDataAutoConfiguration, org.springframework.boot.autoconfigure.data.elasticsearch.ElasticsearchRepositoriesAutoConfiguration, org.springframework.boot.autoconfigure.data.ldap.LdapDataAutoConfiguration, org.springframework.boot.autoconfigure.data.ldap.LdapRepositoriesAutoConfiguration, org.springframework.boot.autoconfigure.data.mongo.MongoDataAutoConfiguration, org.springframework.boot.autoconfigure.data.mongo.MongoRepositoriesAutoConfiguration, org.springframework.boot.autoconfigure.data.neo4j.Neo4jDataAutoConfiguration, org.springframework.boot.autoconfigure.data.neo4j.Neo4jRepositoriesAutoConfiguration, org.springframework.boot.autoconfigure.data.redis.RedisAutoConfiguration, org.springframework.boot.autoconfigure.data.redis.RedisRepositoriesAutoConfiguration, org.springframework.boot.autoconfigure.data.rest.RepositoryRestMvcAutoConfiguration, org.springframework.boot.autoconfigure.data.solr.SolrRepositoriesAutoConfiguration, org.springframework.boot.autoconfigure.elasticsearch.jest.JestAutoConfiguration, org.springframework.boot.autoconfigure.flyway.FlywayAutoConfiguration, org.springframework.boot.autoconfigure.freemarker.FreeMarkerAutoConfiguration, org.springframework.boot.autoconfigure.groovy.template.GroovyTemplateAutoConfiguration, org.springframework.boot.autoconfigure.h2.H2ConsoleAutoConfiguration, org.springframework.boot.autoconfigure.hateoas.HypermediaAutoConfiguration, org.springframework.boot.autoconfigure.hazelcast.HazelcastAutoConfiguration, org.springframework.boot.autoconfigure.hazelcast.HazelcastJpaDependencyAutoConfiguration, org.springframework.boot.autoconfigure.info.ProjectInfoAutoConfiguration, org.springframework.boot.autoconfigure.integration.IntegrationAutoConfiguration, org.springframework.boot.autoconfigure.jdbc.JndiDataSourceAutoConfiguration, org.springframework.boot.autoconfigure.jdbc.XADataSourceAutoConfiguration, org.springframework.boot.autoconfigure.jersey.JerseyAutoConfiguration, org.springframework.boot.autoconfigure.jms.JmsAutoConfiguration, org.springframework.boot.autoconfigure.jms.JndiConnectionFactoryAutoConfiguration, org.springframework.boot.autoconfigure.jms.activemq.ActiveMQAutoConfiguration, org.springframework.boot.autoconfigure.jms.artemis.ArtemisAutoConfiguration, org.springframework.boot.autoconfigure.jooq.JooqAutoConfiguration, org.springframework.boot.autoconfigure.ldap.LdapAutoConfiguration, org.springframework.boot.autoconfigure.ldap.embedded.EmbeddedLdapAutoConfiguration, org.springframework.boot.autoconfigure.liquibase.LiquibaseAutoConfiguration, org.springframework.boot.autoconfigure.mail.MailSenderAutoConfiguration, org.springframework.boot.autoconfigure.mail.MailSenderValidatorAutoConfiguration, org.springframework.boot.autoconfigure.mobile.DeviceDelegatingViewResolverAutoConfiguration, org.springframework.boot.autoconfigure.mobile.DeviceResolverAutoConfiguration, org.springframework.boot.autoconfigure.mobile.SitePreferenceAutoConfiguration, org.springframework.boot.autoconfigure.mongo.embedded.EmbeddedMongoAutoConfiguration, org.springframework.boot.autoconfigure.mongo.MongoAutoConfiguration, org.springframework.boot.autoconfigure.mustache.MustacheAutoConfiguration, org.springframework.boot.autoconfigure.reactor.ReactorAutoConfiguration, org.springframework.boot.autoconfigure.security.FallbackWebSecurityAutoConfiguration, org.springframework.boot.autoconfigure.sendgrid.SendGridAutoConfiguration, org.springframework.boot.autoconfigure.session.SessionAutoConfiguration, org.springframework.boot.autoconfigure.social.FacebookAutoConfiguration, org.springframework.boot.autoconfigure.social.LinkedInAutoConfiguration, org.springframework.boot.autoconfigure.social.SocialWebAutoConfiguration, org.springframework.boot.autoconfigure.social.TwitterAutoConfiguration, org.springframework.boot.autoconfigure.solr.SolrAutoConfiguration, org.springframework.boot.autoconfigure.thymeleaf.ThymeleafAutoConfiguration, org.springframework.boot.autoconfigure.webservices.WebServicesAutoConfiguration
